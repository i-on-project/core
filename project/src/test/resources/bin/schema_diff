#!/bin/sh

# Argument $1 == "apply" -> Apply the generated schema diff to the main DB
# Evvar $DEV_DB_URL -> URL to the dev DB
# Evvar $DB_URL     -> URL to the release DB

set -eu

if [ -z "$DB_URL" ] ||\
  [ -z "$DEV_DB_URL" ]; then
  printf "You need to set the following environment variables:\n\t%s\n\t%s\n" \
    "DB_URL" \
    "DEV_DB_URL"
  exit 1
fi

schema_diff_file="/tmp/schema_diff"
scripts_dir="./sql"

poll_db_availability() {
  # Poll for DB availability
  # 1 minute of timeout
  timeout=60
  start_time="$(date +%s)"
  printf "Attempting to connect to the database...\\n"
  while true; do
    if psql -Atx "$DEV_DB_URL" -1 -c "select" >/dev/null 2>/dev/null; then
      printf "Connection established with the database.\\n"
      break
    fi
    printf "DB unavailable. Retrying...\\n"

    current_time="$(date +%s)"
    if [ "$(( current_time - start_time ))" -ge "$timeout" ]; then
      printf "Timeout reached. Exiting...\\n"
      exit 1
    fi
    sleep 1
  done

  # Test connection
  psql -Atx "$DB_URL" -v "ON_ERROR_STOP=1" -1 -c "select" >/dev/null
  psql -Atx "$DEV_DB_URL" -v "ON_ERROR_STOP=1" -1 -c "select" >/dev/null
}

reset_aux_db_schema() {
  printf "Building the most recent schema in the development DB.\n" >&2
  cat "${scripts_dir}/drop-schema.sql" "${scripts_dir}/create-schema.sql" |\
    psql -Atx "$DEV_DB_URL" -v "ON_ERROR_STOP=1" -1 >&2
}

gen_migration_patches() {
  # Gen schema diff
  # migra exits with 2 on success and 3 on error ._.
  set +e
  migra --unsafe "$DB_URL" "$DEV_DB_URL" >"$schema_diff_file"

  # This will force the script to exit later down the line, if the patches are unsafe
  # If you want to apply the unsafe patches anyway, comment the following line
  migra "$DB_URL" "$DEV_DB_URL" >/dev/null 2>/dev/null
  err="$?"
  set -e

  printf "\nGenerated patches for schema migration:\n"
  cat "$schema_diff_file"
}

migrate_db() {
  cat "$schema_diff_file" "${scripts_dir}/insert-essential-data.sql" |\
    psql -Atx "$DB_URL" -v "ON_ERROR_STOP=1" -1 >&2
}

poll_db_availability

reset_aux_db_schema

gen_migration_patches

if [ "$#" != "0" ]; then
  case "$1" in
  "apply")
    if [ "$err" != "2" ] && [ "$err" != "0" ]; then
      printf "Destructive patches generated. Aborting.\n"
      exit 1
    fi
    migrate_db
  ;;
  "force")
    migrate_db
  ;;
  *) ;;
  esac
fi

