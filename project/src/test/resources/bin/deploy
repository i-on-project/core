#!/bin/sh

set -eu

# Check for needed evvars
if [ -z "$DB_HOST" ] ||\
  [ -z "$DB_PORT" ] ||\
  [ -z "$DB_DATABASE" ] ||\
  [ -z "$DB_USER" ] ||\
  [ -z "$DB_PASSWORD" ]; then
  printf "You need to set the following environment variables:\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n" \
    "DB_HOST" \
    "DB_PORT" \
    "DB_DATABASE" \
    "DB_USER" \
    "DB_PASSWORD"
  exit 1
fi

core_image_name="ion-core"
core_container_name="core-production"
core_port="8080"

stop_core() {
  printf "Stopping core container\n"
  docker stop ${core_container_name} 2>/dev/null || true
  docker rm ${core_container_name} 2>/dev/null || true
  printf "Core container has stopped\n"
}

build_core_image() {
  printf "Building core image\n"
  cd project

  docker build -f ./res/dockerfile_ci -t "${core_image_name}:latest" .

  cd ..
  printf "Core image built\n"
}

start_core_container() {
  printf "Starting core container\n"

  docker run --name ${core_container_name} \
    -p "${core_port}:${core_port}" \
    -e GRADLE_OPTIONS="-xtest" \
    -e JDBC_DATABASE_URL="jdbc:${db_con_string}" \
    -e ION_CORE_SECRET_KEY="${ION_CORE_SECRET_KEY}" \
    -e ION_CORE_BASE_URL="${ION_CORE_BASE_URL}" \
    -d "${core_image_name}:latest" run

  printf "Core container has started and it'll be available on port ${core_port}\n"
}

# Make an attempt to migrate the database's schema
schema_migration() {
  printf "Attempting to migrate DB schema...\n"

  schema_diff_img="core-db-schema-diff"
  schema_diff_dockerfile="dockerfile_schema_diff"
  db_img="core-aux-db"
  db_dockerfile="dockerfile_db"

  dev_db_user="migration"
  dev_db_password="migration"
  dev_db_database="core"
  dev_db_port="10021"

  db_con_string="postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}?user=${DB_USER}&password=${DB_PASSWORD}"
  dev_db_con_string="postgresql://localhost:${dev_db_port}/${dev_db_database}?user=${dev_db_user}&password=${dev_db_password}"

  stop_core

  backup_dir="$(pwd)"
  cd .docker/src/res

  docker build -f "${db_dockerfile}" -t "${db_img}" .
  docker run --rm \
    --name dev-db \
    -e POSTGRES_USER="${dev_db_user}" \
    -e POSTGRES_PASSWORD="${dev_db_password}" \
    -e POSTGRES_DB="${dev_db_database}" \
    -p "${dev_db_port}:5432" \
    -d "${db_img}"

  docker build -f "$schema_diff_dockerfile" -t "$schema_diff_img" .
  docker run --rm --network="host" \
    -e DEV_DB_URL="$dev_db_con_string" \
    -e DB_URL="$db_con_string" \
    "$schema_diff_img" apply

  migra_success=$?
  cd "$backup_dir"
  docker stop dev-db

  if [ $migra_success -eq 0 ]; then
    printf "Schema migrated successfully.\n"
    build_core_image
    start_core_container
  else
    printf "Error migrating schema.\n"
    # TODO: trigger email notification
    start_core_container
  fi
}

deploy_watchtower() {
  container_hash="$(basename $(cat /proc/1/cpuset))"
  container_name="$(docker inspect --format='{{.Name}}' ${container_hash} | cut -c 2-)"
  
  docker run \
    --name deploy-watchtower \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -d containrrr/watchtower "${container_name}" --interval 30 \
    2>/dev/null || true
}

# ENTRYPOINT
schema_migration
deploy_watchtower

cleanup() {
  exit 0
}

while : ; do sleep 1 ; done
