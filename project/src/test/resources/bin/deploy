#!/bin/sh

# Check for needed evvars
if [ -z "$DB_HOST" ] ||\
  [ -z "$DB_CORE_HOST" ] ||\
  [ -z "$DB_PORT" ] ||\
  [ -z "$DB_DATABASE" ] ||\
  [ -z "$DB_USER" ] ||\
  [ -z "$DB_PASSWORD" ]; then
  printf "You need to set the following environment variables:\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n" \
    "DB_HOST" \
    "DB_CORE_HOST" \
    "DB_PORT" \
    "DB_DATABASE" \
    "DB_USER" \
    "DB_PASSWORD"
  exit 1
fi

set -eu

core_image="ghcr.io/i-on-project/core:latest"
core_container_name="core-production"
core_port="8080"

db_suffix="${DB_PORT}/${DB_DATABASE}?user=${DB_USER}&password=${DB_PASSWORD}"
db_con_string="jdbc:postgresql://${DB_HOST}:${db_suffix}"
db_core_con_string="jdbc:postgresql://${DB_CORE_HOST}:${db_suffix}"

stop_core() {
  printf "Stopping core container\n"
  docker stop ${core_container_name} 2>/dev/null || true
  docker rm ${core_container_name} 2>/dev/null || true
  printf "Core container has stopped\n"
}

pull_core_image() {
  printf "Pulling core image\n"
  docker pull "${core_image}" || true
  printf "Core image pulled\n"
}

start_core_container() {
  printf "Starting core container\n"

  docker run --name ${core_container_name} \
    -p "${core_port}:${core_port}" \
    -e JDBC_DATABASE_URL="${db_core_con_string}" \
    -e ION_CORE_SECRET_KEY="${ION_CORE_SECRET_KEY}" \
    -e ION_CORE_BASE_URL="${ION_CORE_BASE_URL}" \
    -d "${core_image}"

  printf "Core container has started and it'll be available on port ${core_port}\n"
}

# Make an attempt to migrate the database's schema
schema_migration() {
  printf "Attempting to migrate DB schema...\n"

  stop_core

  # Create V1__Initial migration from create-schema and insert-essential-data
  cat ./docker/sql/create-schema.sql ./docker/sql/insert-essential-data.sql > ./migrations/V1__Initial.sql

  set +e
  flyway -url="${db_con_string}" \
    -locations="filesystem:migrations/" \
    migrate

  migra_success=$?
  set -e

  if [ $migra_success -eq 0 ]; then
    printf "Schema migrated successfully.\n"
    pull_core_image
    start_core_container
  else
    printf "Error migrating schema.\n"
    # TODO: trigger email notification
    start_core_container
  fi
}

deploy_watchtower() {
  container_hash="$(basename $(cat /proc/1/cpuset))"
  container_name="$(docker inspect --format='{{.Name}}' ${container_hash} | cut -c 2-)"
  
  docker run \
    --name deploy-watchtower \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -d containrrr/watchtower "${container_name}" --interval 30 \
    2>/dev/null || true
}

# ENTRYPOINT
schema_migration
deploy_watchtower

while : ; do sleep 1 ; done